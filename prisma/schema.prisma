// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  // directUrl         = env("DIRECT_URL")

  // Since you are using planetscale, comment it if you are not
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String              @id @default(cuid())
  name          String?
  mobile        String?
  password      String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organizations OrganizationUsers[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrganizationPlan {
  FREE
  PRO
  ULTIMATE
}

model Organization {
  id             String              @id @default(cuid())
  name           String
  aiResources    AIResource[]
  apps           App[]
  messages       Message[]
  apiKeys        APIKey[]
  users          OrganizationUsers[]
  sensitiveWords SensitiveWord[]
  chatSessions   ChatSession[]
  providers      Provider[]
  plan           OrganizationPlan @default(FREE)
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

model OrganizationUsers {
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           Role

  @@id([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model Usage {
  id               String     @id @default(cuid())
  message          Message    @relation(fields: [messageId], references: [id])
  messageId        String     @unique
  aiResource       AIResource @relation(fields: [aiResourceId], references: [id])
  aiResourceId     String
  promptTokens     Int
  completionTokens Int
  totalTokens      Int

  @@index([messageId])
  @@index([aiResourceId])
}

model Message {
  id                     String                   @id @default(cuid())
  content                String                   @db.Text
  answer                 String                   @db.Text
  createdAt              DateTime                 @default(now())
  senderUnionId          String
  sender                 String
  isAIAnswer             Boolean                  @default(true)
  hasError               Boolean                  @default(false)
  app                    App                      @relation(fields: [appId], references: [id])
  appId                  String
  usage                  Usage?
  organization           Organization?            @relation(fields: [organizationId], references: [id])
  organizationId         String?
  conversationId         String?
  receivedMessageId      String?
  receivedMessage        ReceivedMessage?         @relation(fields: [receivedMessageId], references: [id])
  sensitiveWordInMessage SensitiveWordInMessage[]

  @@index([receivedMessageId])
  @@index([conversationId])
  @@index([organizationId])
  @@index([appId])
  @@index([senderUnionId])
}

enum AIResourceType {
  OPENAI
  AZ_OPENAI
  SELF_HOST_OPENAI
}

model AIResource {
  id             String         @id @default(cuid())
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  type           AIResourceType @default(OPENAI)
  name           String
  model          String?
  apiKey         String?
  tokenUsed      Int            @default(0)
  tokenRemains   Int            @default(0)
  hostUrl        String?
  builtIn        Boolean        @default(true)
  quota          Int?
  apiVersion     String?

  usages Usage[]
  apps   App[]

  @@index([organizationId])
}

model APIKey {
  id             String       @id @default(uuid())
  expired        DateTime
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@index([organizationId])
}

enum AppType {
  FEISHU
  WEWORK
  DINGTALK
  WEB
}

model App {
  id               String            @id @default(cuid())
  organization     Organization      @relation(fields: [organizationId], references: [id])
  organizationId   String
  name             String?
  appType          String
  aiResource       AIResource?       @relation(fields: [aiResourceId], references: [id])
  aiResourceId     String?
  messages         Message[]
  tokenLimitation  Int?
  tokenUsed        Int               @default(0)
  config           Json
  receivedMessages ReceivedMessage[]
  chatSession      ChatSession[]
  builtIn          Boolean           @default(false)

  @@index([organizationId])
  @@index([aiResourceId])
}

enum ReceivedMessageType {
  FEISHU
  WEWORK
  DINGTALK
  WEB
  UNKNOWN
}

model ReceivedMessage {
  id             String              @id
  data           Json
  processing     Boolean
  conversationId String?
  createdAt      DateTime            @default(now())
  recievedAt     DateTime            @default(now())
  eventName      String
  app            App                 @relation(fields: [appId], references: [id])
  appId          String
  type           ReceivedMessageType @default(UNKNOWN)
  Message        Message[]

  @@index([appId])
}

model SensitiveWord {
  id        Int      @id @default(autoincrement())
  value     String
  createdAt DateTime @default(now())

  organization           Organization             @relation(fields: [organizationId], references: [id])
  organizationId         String
  sensitiveWordInMessage SensitiveWordInMessage[]

  @@unique([value, organizationId])
  @@index([organizationId])
  @@index([value])
}

model SensitiveWordInMessage {
  message         Message       @relation(fields: [messageId], references: [id])
  messageId       String
  sensitiveWord   SensitiveWord @relation(fields: [sensitiveWordId], references: [id])
  sensitiveWordId Int
  plainText       String

  @@id([messageId, sensitiveWordId])
  @@index([messageId])
  @@index([sensitiveWordId])
}

enum ChatSessionType {
  MUITIWHEEL
  SINGLEWHEEL
}

model ChatSession {
  createdAt      DateTime        @default(now())
  expiredAt      DateTime
  sender         String
  app            App             @relation(fields: [appId], references: [id])
  appId          String
  organization   Organization    @relation(fields: [organizationId], references: [id])
  organizationId String
  conversationId String          @default(uuid())
  groupId        String
  type           ChatSessionType @default(SINGLEWHEEL)
  temperature    String?

  @@id([groupId, sender])
  @@unique([groupId, sender, appId])
  @@index([appId])
  @@index([organizationId])
}

enum PorviderType {
  GITHUB
  FEISHU
  WEWORK
  DINGTALK
  OAUTH
}

model Provider {
  id                    String       @id @default(cuid())
  name                  String
  organization          Organization @relation(fields: [organizationId], references: [id])
  organizationId        String
  type                  PorviderType
  cliendId              String
  clientSecret          String
  accessToken           String?
  accessTokenExpiredAt  DateTime?
  refreshToken          String?
  refreshTokenExpiredAt DateTime?
  config                Json?

  @@index([organizationId])
}



